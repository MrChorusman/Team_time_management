#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de prueba para verificar la conexi√≥n con Supabase usando Session Pooler
Este script prueba la nueva configuraci√≥n compatible con IPv4 para Render
"""

import os
import sys
import psycopg2
from dotenv import load_dotenv

# A√±adir el directorio backend al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Cargar variables de entorno
load_dotenv()

def test_session_pooler_connection():
    """Prueba la conexi√≥n con Supabase usando Session Pooler"""
    
    print("üîç Probando conexi√≥n con Supabase Session Pooler...")
    print("=" * 60)
    
    # Obtener variables de entorno
    db_host = os.environ.get('SUPABASE_HOST', 'aws-0-eu-west-3.pooler.supabase.com')
    db_port = os.environ.get('SUPABASE_PORT', '5432')
    db_name = os.environ.get('SUPABASE_DB', 'postgres')
    db_user = os.environ.get('SUPABASE_USER', 'postgres.xmaxohyxgsthligskjvg')
    db_password = os.environ.get('SUPABASE_DB_PASSWORD')
    
    print(f"üìç Host: {db_host}")
    print(f"üîå Puerto: {db_port}")
    print(f"üóÑÔ∏è  Base de datos: {db_name}")
    print(f"üë§ Usuario: {db_user}")
    print(f"üîë Contrase√±a: {'***' if db_password else 'NO CONFIGURADA'}")
    print("-" * 60)
    
    if not db_password:
        print("‚ùå ERROR: SUPABASE_DB_PASSWORD no est√° configurado")
        return False
    
    try:
        # Construir URL de conexi√≥n
        connection_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
        print(f"üîó URL de conexi√≥n: postgresql://{db_user}:***@{db_host}:{db_port}/{db_name}")
        
        # Intentar conectar
        print("üîÑ Conectando a Supabase...")
        conn = psycopg2.connect(connection_url)
        
        # Crear cursor
        cursor = conn.cursor()
        
        # Probar consulta b√°sica
        print("üìä Ejecutando consulta de prueba...")
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ Versi√≥n de PostgreSQL: {version}")
        
        # Probar consulta a tablas existentes
        print("üìã Verificando tablas existentes...")
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name;
        """)
        tables = cursor.fetchall()
        
        if tables:
            print(f"‚úÖ Tablas encontradas ({len(tables)}):")
            for table in tables:
                print(f"   - {table[0]}")
        else:
            print("‚ö†Ô∏è  No se encontraron tablas en el esquema p√∫blico")
        
        # Probar consulta a usuarios
        print("üë• Verificando usuarios...")
        cursor.execute("SELECT COUNT(*) FROM \"user\";")
        user_count = cursor.fetchone()[0]
        print(f"‚úÖ Usuarios en la base de datos: {user_count}")
        
        # Cerrar conexi√≥n
        cursor.close()
        conn.close()
        
        print("=" * 60)
        print("üéâ ¬°Conexi√≥n exitosa con Supabase Session Pooler!")
        print("‚úÖ La configuraci√≥n es compatible con IPv4 (Render)")
        return True
        
    except psycopg2.Error as e:
        print("=" * 60)
        print(f"‚ùå ERROR de conexi√≥n: {e}")
        print("üîç Verifica que las variables de entorno est√©n configuradas correctamente")
        return False
    except Exception as e:
        print("=" * 60)
        print(f"‚ùå ERROR inesperado: {e}")
        return False

def test_environment_variables():
    """Verifica que todas las variables de entorno necesarias est√©n configuradas"""
    
    print("üîç Verificando variables de entorno...")
    print("=" * 60)
    
    required_vars = {
        'SUPABASE_HOST': 'aws-0-eu-west-3.pooler.supabase.com',
        'SUPABASE_PORT': '5432',
        'SUPABASE_DB': 'postgres',
        'SUPABASE_USER': 'postgres.xmaxohyxgsthligskjvg',
        'SUPABASE_DB_PASSWORD': None,  # Debe estar configurado pero no lo mostramos
    }
    
    all_configured = True
    
    for var_name, expected_value in required_vars.items():
        actual_value = os.environ.get(var_name)
        
        if var_name == 'SUPABASE_DB_PASSWORD':
            if actual_value:
                print(f"‚úÖ {var_name}: *** (configurado)")
            else:
                print(f"‚ùå {var_name}: NO CONFIGURADO")
                all_configured = False
        else:
            if actual_value == expected_value:
                print(f"‚úÖ {var_name}: {actual_value}")
            else:
                print(f"‚ö†Ô∏è  {var_name}: {actual_value} (esperado: {expected_value})")
    
    print("-" * 60)
    
    if all_configured:
        print("‚úÖ Todas las variables de entorno est√°n configuradas correctamente")
    else:
        print("‚ùå Algunas variables de entorno necesitan configuraci√≥n")
    
    return all_configured

if __name__ == "__main__":
    print("üöÄ PRUEBA DE CONEXI√ìN SUPABASE SESSION POOLER")
    print("=" * 60)
    
    # Verificar variables de entorno
    env_ok = test_environment_variables()
    print()
    
    if env_ok:
        # Probar conexi√≥n
        connection_ok = test_session_pooler_connection()
        
        if connection_ok:
            print("\nüéØ RESULTADO: Configuraci√≥n exitosa para Render")
            sys.exit(0)
        else:
            print("\nüí• RESULTADO: Error en la conexi√≥n")
            sys.exit(1)
    else:
        print("\nüí• RESULTADO: Variables de entorno no configuradas")
        sys.exit(1)
