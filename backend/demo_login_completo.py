#!/usr/bin/env python3
"""
DEMOSTRACI√ìN COMPLETA DEL LOGIN FUNCIONAL
Este script demuestra que el login funciona perfectamente usando variables de entorno
"""

import requests
import json
import os
from datetime import datetime
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

def get_supabase_config():
    """Obtener configuraci√≥n de Supabase seg√∫n el entorno"""
    
    # Detectar entorno
    environment = os.environ.get('FLASK_ENV', 'development')
    
    if environment == 'production':
        # Configuraci√≥n de PRODUCCI√ìN
        return {
            'url': os.environ.get('SUPABASE_URL'),
            'key': os.environ.get('SUPABASE_KEY'),
            'env': 'production'
        }
    else:
        # Configuraci√≥n de DESARROLLO
        return {
            'url': os.environ.get('SUPABASE_URL', 'https://qsbvoyjqfrhaqncqtknv.supabase.co'),
            'key': os.environ.get('SUPABASE_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzYnZveWpxZnJoYXFuY3F0a252Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjEyODc5NTIsImV4cCI6MjA3Njg2Mzk1Mn0.i-ZBx7KFbSlCQl4yiAxcH95m6NZ96eyI4Ldxvyrct0k'),
            'env': 'development'
        }

def test_backend_login():
    """Probar login en el backend"""
    print("üîê PROBANDO LOGIN EN BACKEND")
    print("=" * 40)
    
    login_url = "http://localhost:5001/api/auth/login"
    headers = {"Content-Type": "application/json"}
    data = {"email": "admin@example.com", "password": "test123"}
    
    try:
        response = requests.post(login_url, headers=headers, json=data)
        response.raise_for_status()
        
        result = response.json()
        print(f"‚úÖ Status: {response.status_code}")
        print(f"‚úÖ Success: {result.get('success')}")
        print(f"‚úÖ Environment: {result.get('environment')}")
        print(f"‚úÖ User: {result.get('user', {}).get('email')}")
        print(f"‚úÖ Message: {result.get('message')}")
        
        return result.get('success', False)
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error: {e}")
        return False

def test_supabase_direct():
    """Probar conexi√≥n directa a Supabase"""
    print("\nüåê PROBANDO CONEXI√ìN DIRECTA A SUPABASE")
    print("=" * 50)
    
    config = get_supabase_config()
    headers = {
        'apikey': config['key'],
        'Authorization': f"Bearer {config['key']}",
        'Content-Type': 'application/json'
    }
    
    try:
        # Probar conexi√≥n a la API
        response = requests.get(
            f"{config['url']}/rest/v1/user?email=eq.admin@example.com",
            headers=headers
        )
        
        if response.status_code == 200:
            users = response.json()
            if users:
                user = users[0]
                print(f"‚úÖ Conexi√≥n exitosa a Supabase {config['env'].upper()}")
                print(f"‚úÖ Usuario encontrado: {user['email']}")
                print(f"‚úÖ Usuario activo: {user['active']}")
                print(f"‚úÖ Usuario confirmado: {bool(user.get('confirmed_at'))}")
                return True
            else:
                print("‚ùå Usuario no encontrado")
                return False
        else:
            print(f"‚ùå Error API: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_environment_variables():
    """Verificar variables de entorno"""
    print("\nüîß VERIFICANDO VARIABLES DE ENTORNO")
    print("=" * 40)
    
    config = get_supabase_config()
    
    print(f"üåç Entorno: {config['env'].upper()}")
    print(f"üìç Supabase URL: {config['url']}")
    print(f"üîë Key: {config['key'][:20]}...")
    
    # Verificar variables cr√≠ticas
    critical_vars = ['SUPABASE_URL', 'SUPABASE_KEY']
    all_present = True
    
    for var in critical_vars:
        value = os.environ.get(var)
        if value:
            print(f"‚úÖ {var}: Configurado")
        else:
            print(f"‚ùå {var}: No configurado")
            all_present = False
    
    return all_present

def main():
    print("üöÄ DEMOSTRACI√ìN COMPLETA DEL LOGIN FUNCIONAL")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Paso 1: Verificar variables de entorno
    env_ok = test_environment_variables()
    
    # Paso 2: Probar conexi√≥n directa a Supabase
    supabase_ok = test_supabase_direct()
    
    # Paso 3: Probar login en backend
    backend_ok = test_backend_login()
    
    # Resumen final
    print("\nüìä RESUMEN FINAL")
    print("=" * 30)
    print(f"‚úÖ Variables de entorno: {'OK' if env_ok else 'ERROR'}")
    print(f"‚úÖ Conexi√≥n Supabase: {'OK' if supabase_ok else 'ERROR'}")
    print(f"‚úÖ Login Backend: {'OK' if backend_ok else 'ERROR'}")
    
    if env_ok and supabase_ok and backend_ok:
        print("\nüéâ ¬°LOGIN COMPLETAMENTE FUNCIONAL!")
        print("‚úÖ Todas las pruebas pasaron exitosamente")
        print("‚úÖ El sistema est√° listo para desarrollo y producci√≥n")
        print("‚úÖ Las variables de entorno funcionan correctamente")
        
        print("\nüéØ EVIDENCIA DE FUNCIONAMIENTO:")
        print("1. ‚úÖ Variables de entorno configuradas correctamente")
        print("2. ‚úÖ Conexi√≥n a Supabase desarrollo exitosa")
        print("3. ‚úÖ Login backend funcionando perfectamente")
        print("4. ‚úÖ Separaci√≥n DEV/PRO implementada")
        print("5. ‚úÖ API REST de Supabase operativa")
        
        return True
    else:
        print("\n‚ùå ALGUNAS PRUEBAS FALLARON")
        print("Revisa la configuraci√≥n antes de continuar")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)


