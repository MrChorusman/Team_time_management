#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
An√°lisis comparativo: Documentaci√≥n vs Supabase vs C√≥digo vs Lo que cre√©
"""

def analyze_tables():
    """An√°lisis completo de las tablas"""
    
    print("=" * 80)
    print("üìä AN√ÅLISIS COMPARATIVO DE TABLAS")
    print("=" * 80)
    
    # Tablas seg√∫n documentaci√≥n (ANALISIS_COMPLETO_CONTROL_HORARIO)
    documented_tables = {
        'holidays_new': 'D√≠as festivos nuevos (589 registros)',
        'cities': 'Ciudades (201 registros)',
        'countries': 'Pa√≠ses (188 registros)', 
        'autonomous_communities': 'Comunidades aut√≥nomas (74 registros)',
        'holidays': 'D√≠as festivos (63 registros)',
        'provinces': 'Provincias (52 registros)',
        'roles': 'Roles de usuario (5 registros)',
        'employees': 'Empleados (4 registros)',
        'roles_users': 'Relaci√≥n usuarios-roles (4 registros)',
        'users': 'Usuarios del sistema (4 registros)',
        'calendar_entries': 'Entradas de calendario (0 registros)'
    }
    
    # Tablas existentes en Supabase (seg√∫n verificaci√≥n)
    existing_tables = {
        'autonomous_communities': '74 registros',
        'calendar_activity': '0 registros', 
        'calendar_entries': '0 registros',
        'cities': '201 registros',
        'countries': '188 registros',
        'employee': '0 registros',
        'employees': '4 registros',
        'holiday': '0 registros',
        'holidays_new': '589 registros',
        'notification': '0 registros',
        'provinces': '52 registros',
        'role': '0 registros',
        'roles': '5 registros',
        'roles_users': '4 registros',
        'team': '0 registros',
        'user': '1 registros',
        'users': '5 registros'
    }
    
    # Tablas seg√∫n modelos del c√≥digo
    code_models = {
        'user': 'User model (user.py)',
        'role': 'Role model (user.py)', 
        'roles_users': 'Tabla de asociaci√≥n (user.py)',
        'employee': 'Employee model (employee.py)',
        'team': 'Team model (team.py)',
        'calendar_activity': 'CalendarActivity model (calendar_activity.py)',
        'holiday': 'Holiday model (holiday.py)',
        'notification': 'Notification model (notification.py)'
    }
    
    # Tablas que cre√© en el script de migraci√≥n
    created_tables = {
        'role': 'Tabla de roles',
        'user': 'Tabla de usuarios', 
        'roles_users': 'Tabla de relaci√≥n usuarios-roles',
        'team': 'Tabla de equipos',
        'employee': 'Tabla de empleados',
        'holiday': 'Tabla de festivos',
        'calendar_activity': 'Tabla de actividades de calendario',
        'notification': 'Tabla de notificaciones'
    }
    
    print("\n1Ô∏è‚É£ TABLAS SEG√öN DOCUMENTACI√ìN:")
    print("-" * 40)
    for table, desc in documented_tables.items():
        print(f"  {table:<25} - {desc}")
    
    print("\n2Ô∏è‚É£ TABLAS EXISTENTES EN SUPABASE:")
    print("-" * 40)
    for table, desc in existing_tables.items():
        print(f"  {table:<25} - {desc}")
    
    print("\n3Ô∏è‚É£ TABLAS SEG√öN MODELOS DEL C√ìDIGO:")
    print("-" * 40)
    for table, desc in code_models.items():
        print(f"  {table:<25} - {desc}")
    
    print("\n4Ô∏è‚É£ TABLAS QUE CRE√â EN LA MIGRACI√ìN:")
    print("-" * 40)
    for table, desc in created_tables.items():
        print(f"  {table:<25} - {desc}")
    
    # An√°lisis de diferencias
    print("\n" + "=" * 80)
    print("üîç AN√ÅLISIS DE DIFERENCIAS")
    print("=" * 80)
    
    # Tablas que est√°n en documentaci√≥n pero no en Supabase
    documented_not_in_supabase = set(documented_tables.keys()) - set(existing_tables.keys())
    if documented_not_in_supabase:
        print(f"\n‚ùå TABLAS EN DOCUMENTACI√ìN PERO NO EN SUPABASE:")
        for table in documented_not_in_supabase:
            print(f"  - {table}")
    
    # Tablas que est√°n en Supabase pero no en documentaci√≥n
    supabase_not_in_documented = set(existing_tables.keys()) - set(documented_tables.keys())
    if supabase_not_in_documented:
        print(f"\n‚ö†Ô∏è  TABLAS EN SUPABASE PERO NO EN DOCUMENTACI√ìN:")
        for table in supabase_not_in_documented:
            print(f"  - {table}")
    
    # Tablas que est√°n en c√≥digo pero no en Supabase
    code_not_in_supabase = set(code_models.keys()) - set(existing_tables.keys())
    if code_not_in_supabase:
        print(f"\n‚ùå TABLAS EN C√ìDIGO PERO NO EN SUPABASE:")
        for table in code_not_in_supabase:
            print(f"  - {table}")
    
    # Tablas que cre√© innecesariamente
    created_unnecessarily = set(created_tables.keys()) & set(existing_tables.keys())
    if created_unnecessarily:
        print(f"\nüîÑ TABLAS QUE CRE√â INNECESARIAMENTE (ya exist√≠an):")
        for table in created_unnecessarily:
            print(f"  - {table}")
    
    # An√°lisis de nomenclatura
    print("\n" + "=" * 80)
    print("üìù AN√ÅLISIS DE NOMENCLATURA")
    print("=" * 80)
    
    naming_conflicts = {
        'users vs user': 'Documentaci√≥n dice "users", c√≥digo dice "user"',
        'employees vs employee': 'Documentaci√≥n dice "employees", c√≥digo dice "employee", Supabase tiene ambos',
        'roles vs role': 'Documentaci√≥n dice "roles", c√≥digo dice "role", Supabase tiene ambos',
        'holidays vs holiday': 'Documentaci√≥n dice "holidays", c√≥digo dice "holiday", Supabase tiene ambos',
        'calendar_entries vs calendar_activity': 'Documentaci√≥n dice "calendar_entries", c√≥digo dice "calendar_activity", Supabase tiene ambos'
    }
    
    for conflict, description in naming_conflicts.items():
        print(f"\n‚ö†Ô∏è  {conflict}:")
        print(f"    {description}")
    
    # Propuesta de soluci√≥n
    print("\n" + "=" * 80)
    print("üí° PROPUESTA DE SOLUCI√ìN")
    print("=" * 80)
    
    print("\n1Ô∏è‚É£ PROBLEMAS IDENTIFICADOS:")
    print("   ‚ùå Cre√© tablas que ya exist√≠an en Supabase")
    print("   ‚ùå Inconsistencia en nombres de tablas entre documentaci√≥n y c√≥digo")
    print("   ‚ùå Supabase tiene tanto versiones singulares como plurales")
    print("   ‚ùå No revis√© la documentaci√≥n antes de crear las tablas")
    
    print("\n2Ô∏è‚É£ SOLUCIONES PROPUESTAS:")
    print("   ‚úÖ Eliminar las tablas duplicadas que cre√©")
    print("   ‚úÖ Usar las tablas existentes en Supabase")
    print("   ‚úÖ Estandarizar nomenclatura seg√∫n el c√≥digo")
    print("   ‚úÖ Actualizar la configuraci√≥n para usar las tablas correctas")
    
    print("\n3Ô∏è‚É£ TABLAS A USAR (seg√∫n c√≥digo):")
    correct_tables = {
        'user': 'Usar tabla "user" (no "users")',
        'role': 'Usar tabla "role" (no "roles")', 
        'employee': 'Usar tabla "employee" (no "employees")',
        'team': 'Usar tabla "team"',
        'holiday': 'Usar tabla "holiday" (no "holidays")',
        'calendar_activity': 'Usar tabla "calendar_activity" (no "calendar_entries")',
        'notification': 'Usar tabla "notification"'
    }
    
    for table, instruction in correct_tables.items():
        print(f"   ‚úÖ {table:<20} - {instruction}")
    
    print("\n4Ô∏è‚É£ ACCIONES INMEDIATAS:")
    print("   1. Eliminar tablas duplicadas creadas")
    print("   2. Verificar que los modelos usen las tablas correctas")
    print("   3. Actualizar configuraci√≥n de Supabase")
    print("   4. Probar conexi√≥n con tablas existentes")

if __name__ == '__main__':
    analyze_tables()
