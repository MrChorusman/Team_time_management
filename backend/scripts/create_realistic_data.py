"""
Script para generar datos realistas de equipos y empleados
Reemplaza los datos de prueba con informaci√≥n m√°s realista
"""

import os
import sys
import random
from datetime import datetime, timedelta
from werkzeug.security import generate_password_hash

# A√±adir el directorio backend al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from models import db, User, Role, Employee, Team, Holiday, CalendarActivity, Notification
from services.holiday_service import HolidayService

class RealisticDataGenerator:
    """Generador de datos realistas para el sistema"""
    
    def __init__(self):
        self.teams_data = [
            {
                'name': 'Desarrollo Frontend',
                'description': 'Equipo responsable del desarrollo de interfaces de usuario',
                'manager_name': 'Ana Garc√≠a',
                'manager_email': 'ana.garcia@company.com'
            },
            {
                'name': 'Desarrollo Backend',
                'description': 'Equipo responsable de la l√≥gica de negocio y APIs',
                'manager_name': 'Carlos Rodr√≠guez',
                'manager_email': 'carlos.rodriguez@company.com'
            },
            {
                'name': 'DevOps',
                'description': 'Equipo responsable de infraestructura y despliegues',
                'manager_name': 'Mar√≠a L√≥pez',
                'manager_email': 'maria.lopez@company.com'
            },
            {
                'name': 'Dise√±o UX/UI',
                'description': 'Equipo responsable del dise√±o de experiencia de usuario',
                'manager_name': 'David Mart√≠n',
                'manager_email': 'david.martin@company.com'
            },
            {
                'name': 'Marketing Digital',
                'description': 'Equipo responsable de estrategias de marketing online',
                'manager_name': 'Laura S√°nchez',
                'manager_email': 'laura.sanchez@company.com'
            },
            {
                'name': 'Ventas',
                'description': 'Equipo responsable de ventas y relaciones con clientes',
                'manager_name': 'Roberto Fern√°ndez',
                'manager_email': 'roberto.fernandez@company.com'
            },
            {
                'name': 'Soporte T√©cnico',
                'description': 'Equipo responsable del soporte a usuarios y clientes',
                'manager_name': 'Isabel Gonz√°lez',
                'manager_email': 'isabel.gonzalez@company.com'
            },
            {
                'name': 'Recursos Humanos',
                'description': 'Equipo responsable de gesti√≥n de personal y talento',
                'manager_name': 'Miguel Torres',
                'manager_email': 'miguel.torres@company.com'
            },
            {
                'name': 'Administraci√≥n',
                'description': 'Equipo responsable de gesti√≥n administrativa y financiera',
                'manager_name': 'Carmen Ruiz',
                'manager_email': 'carmen.ruiz@company.com'
            },
            {
                'name': 'Direcci√≥n',
                'description': 'Equipo directivo y de toma de decisiones estrat√©gicas',
                'manager_name': 'Alejandro Jim√©nez',
                'manager_email': 'alejandro.jimenez@company.com'
            }
        ]
        
        self.employee_names = [
            ('Ana', 'Garc√≠a'), ('Carlos', 'Rodr√≠guez'), ('Mar√≠a', 'L√≥pez'), ('David', 'Mart√≠n'),
            ('Laura', 'S√°nchez'), ('Roberto', 'Fern√°ndez'), ('Isabel', 'Gonz√°lez'), ('Miguel', 'Torres'),
            ('Carmen', 'Ruiz'), ('Alejandro', 'Jim√©nez'), ('Elena', 'Vargas'), ('Pablo', 'Moreno'),
            ('Sofia', 'Herrera'), ('Javier', 'D√≠az'), ('Natalia', 'Castro'), ('Andr√©s', 'Mendoza'),
            ('Patricia', 'Romero'), ('Fernando', '√Ålvarez'), ('M√≥nica', 'Silva'), ('Antonio', 'Ramos'),
            ('Cristina', 'Navarro'), ('Diego', 'Morales'), ('Raquel', 'Ortega'), ('Sergio', 'Delgado'),
            ('Beatriz', 'Vega'), ('Manuel', 'Herrero'), ('Teresa', 'Iglesias'), ('Francisco', 'Pe√±a'),
            ('Rosa', 'Blanco'), ('Jos√©', 'Guti√©rrez'), ('Pilar', 'Molina'), ('Juan', 'Cabrera'),
            ('Mercedes', 'Reyes'), ('Pedro', 'Aguilar'), ('Concepci√≥n', 'Santos'), ('Rafael', 'Cruz'),
            ('Dolores', 'Medina'), ('√Ångel', 'Castillo'), ('Esperanza', 'Cort√©s'), ('Vicente', 'Garrido'),
            ('Encarnaci√≥n', 'Le√≥n'), ('Jos√© Antonio', 'M√°rquez'), ('Mar√≠a Carmen', 'Guerrero'),
            ('Jos√© Manuel', 'Lozano'), ('Mar√≠a Pilar', 'Ib√°√±ez'), ('Francisco Javier', 'Mu√±oz'),
            ('Mar√≠a Dolores', 'Gallego'), ('Antonio Jos√©', 'V√°zquez'), ('Mar√≠a Teresa', 'Sanz'),
            ('Jos√© Luis', 'Gil'), ('Mar√≠a √Ångeles', 'Serrano'), ('Manuel Jos√©', 'Ram√≠rez')
        ]
        
        self.countries = ['ES', 'FR', 'DE', 'IT', 'PT', 'GB', 'US', 'MX', 'AR', 'BR']
        self.cities = {
            'ES': ['Madrid', 'Barcelona', 'Valencia', 'Sevilla', 'Zaragoza'],
            'FR': ['Par√≠s', 'Lyon', 'Marsella', 'Toulouse', 'Niza'],
            'DE': ['Berl√≠n', 'M√∫nich', 'Hamburgo', 'Colonia', 'Frankfurt'],
            'IT': ['Roma', 'Mil√°n', 'N√°poles', 'Tur√≠n', 'Florencia'],
            'PT': ['Lisboa', 'Oporto', 'Co√≠mbra', 'Braga', 'Faro'],
            'GB': ['Londres', 'Manchester', 'Birmingham', 'Liverpool', 'Leeds'],
            'US': ['Nueva York', 'Los √Ångeles', 'Chicago', 'Houston', 'Phoenix'],
            'MX': ['Ciudad de M√©xico', 'Guadalajara', 'Monterrey', 'Puebla', 'Tijuana'],
            'AR': ['Buenos Aires', 'C√≥rdoba', 'Rosario', 'Mendoza', 'La Plata'],
            'BR': ['S√£o Paulo', 'R√≠o de Janeiro', 'Brasilia', 'Salvador', 'Fortaleza']
        }
        
        self.hour_configs = [
            {'daily_hours': 8.0, 'weekly_hours': 40.0, 'vacation_days': 22},
            {'daily_hours': 7.5, 'weekly_hours': 37.5, 'vacation_days': 20},
            {'daily_hours': 6.0, 'weekly_hours': 30.0, 'vacation_days': 18},
            {'daily_hours': 4.0, 'weekly_hours': 20.0, 'vacation_days': 15}
        ]
    
    def clean_existing_data(self, preserve_admins=True):
        """Limpia datos existentes preservando usuarios admin si se especifica"""
        print("üßπ Limpiando datos existentes...")
        
        # Eliminar actividades de calendario
        CalendarActivity.query.delete()
        print("   ‚úì Actividades de calendario eliminadas")
        
        # Eliminar notificaciones
        Notification.query.delete()
        print("   ‚úì Notificaciones eliminadas")
        
        # Eliminar empleados
        Employee.query.delete()
        print("   ‚úì Empleados eliminados")
        
        # Eliminar equipos
        Team.query.delete()
        print("   ‚úì Equipos eliminados")
        
        # Eliminar usuarios (preservando admins si se especifica)
        if preserve_admins:
            admin_users = User.query.join(User.roles).filter(Role.name == 'admin').all()
            admin_emails = [user.email for user in admin_users]
            User.query.filter(~User.email.in_(admin_emails)).delete()
            print(f"   ‚úì Usuarios eliminados (preservando {len(admin_users)} admins)")
        else:
            User.query.delete()
            print("   ‚úì Todos los usuarios eliminados")
        
        db.session.commit()
        print("‚úÖ Datos limpiados exitosamente")
    
    def create_teams(self):
        """Crea equipos realistas"""
        print("üë• Creando equipos...")
        
        teams = []
        for team_data in self.teams_data:
            team = Team(
                name=team_data['name'],
                description=team_data['description'],
                active=True,
                created_at=datetime.utcnow() - timedelta(days=random.randint(30, 365))
            )
            db.session.add(team)
            teams.append(team)
        
        db.session.commit()
        print(f"‚úÖ {len(teams)} equipos creados")
        return teams
    
    def create_managers(self, teams):
        """Crea usuarios manager para cada equipo"""
        print("üë®‚Äçüíº Creando managers...")
        
        managers = []
        manager_role = Role.query.filter_by(name='manager').first()
        
        for i, team in enumerate(teams):
            team_data = self.teams_data[i]
            
            # Crear usuario manager
            manager_user = User(
                email=team_data['manager_email'],
                password_hash=generate_password_hash('password123'),
                first_name=team_data['manager_name'].split()[0],
                last_name=team_data['manager_name'].split()[1],
                active=True,
                confirmed_at=datetime.utcnow(),
                created_at=datetime.utcnow() - timedelta(days=random.randint(30, 365))
            )
            manager_user.roles.append(manager_role)
            db.session.add(manager_user)
            
            # Crear empleado manager
            manager_employee = Employee(
                user_id=manager_user.id,
                full_name=team_data['manager_name'],
                team_id=team.id,
                daily_hours=8.0,
                weekly_hours=40.0,
                vacation_days=25,
                country=random.choice(self.countries),
                city=random.choice(self.cities[random.choice(self.countries)]),
                active=True,
                approved=True,
                created_at=manager_user.created_at
            )
            db.session.add(manager_employee)
            
            # Asignar manager al equipo
            team.manager_id = manager_employee.id
            
            managers.append(manager_employee)
        
        db.session.commit()
        print(f"‚úÖ {len(managers)} managers creados")
        return managers
    
    def create_employees(self, teams):
        """Crea empleados realistas distribuidos entre equipos"""
        print("üë∑ Creando empleados...")
        
        employees = []
        employee_role = Role.query.filter_by(name='employee').first()
        
        # Distribuir empleados entre equipos
        employees_per_team = len(self.employee_names) // len(teams)
        remaining_employees = len(self.employee_names) % len(teams)
        
        employee_index = 0
        for i, team in enumerate(teams):
            # Calcular n√∫mero de empleados para este equipo
            team_employee_count = employees_per_team
            if i < remaining_employees:
                team_employee_count += 1
            
            for j in range(team_employee_count):
                if employee_index >= len(self.employee_names):
                    break
                
                first_name, last_name = self.employee_names[employee_index]
                email = f"{first_name.lower()}.{last_name.lower()}@company.com"
                
                # Crear usuario empleado
                employee_user = User(
                    email=email,
                    password_hash=generate_password_hash('password123'),
                    first_name=first_name,
                    last_name=last_name,
                    active=True,
                    confirmed_at=datetime.utcnow(),
                    created_at=datetime.utcnow() - timedelta(days=random.randint(1, 300))
                )
                employee_user.roles.append(employee_role)
                db.session.add(employee_user)
                
                # Configuraci√≥n de horas aleatoria
                hour_config = random.choice(self.hour_configs)
                country = random.choice(self.countries)
                
                # Crear empleado
                employee = Employee(
                    user_id=employee_user.id,
                    full_name=f"{first_name} {last_name}",
                    team_id=team.id,
                    daily_hours=hour_config['daily_hours'],
                    weekly_hours=hour_config['weekly_hours'],
                    vacation_days=hour_config['vacation_days'],
                    country=country,
                    city=random.choice(self.cities[country]),
                    active=True,
                    approved=random.choice([True, True, True, False]),  # 75% aprobados
                    created_at=employee_user.created_at
                )
                db.session.add(employee)
                employees.append(employee)
                
                employee_index += 1
        
        db.session.commit()
        print(f"‚úÖ {len(employees)} empleados creados")
        return employees
    
    def create_calendar_activities(self, employees):
        """Crea actividades de calendario realistas"""
        print("üìÖ Creando actividades de calendario...")
        
        activity_types = ['vacation', 'absence', 'hld', 'guard', 'training', 'others']
        activities = []
        
        for employee in employees:
            # Crear 5-15 actividades por empleado
            num_activities = random.randint(5, 15)
            
            for _ in range(num_activities):
                # Fecha aleatoria en los √∫ltimos 6 meses
                start_date = datetime.utcnow() - timedelta(days=random.randint(1, 180))
                
                # Duraci√≥n aleatoria (1-5 d√≠as para vacaciones, 1 d√≠a para otros)
                activity_type = random.choice(activity_types)
                if activity_type == 'vacation':
                    duration_days = random.randint(1, 5)
                else:
                    duration_days = 1
                
                end_date = start_date + timedelta(days=duration_days)
                
                activity = CalendarActivity(
                    employee_id=employee.id,
                    activity_type=activity_type,
                    start_date=start_date.date(),
                    end_date=end_date.date(),
                    description=f"Actividad de {activity_type} para {employee.full_name}",
                    approved=random.choice([True, True, False]),  # 66% aprobados
                    created_at=start_date
                )
                db.session.add(activity)
                activities.append(activity)
        
        db.session.commit()
        print(f"‚úÖ {len(activities)} actividades de calendario creadas")
        return activities
    
    def create_notifications(self, employees):
        """Crea notificaciones realistas"""
        print("üîî Creando notificaciones...")
        
        notification_types = ['system_alert', 'reminder', 'holiday_alert', 'vacation_reminder', 'hours_report']
        priorities = ['low', 'medium', 'high']
        notifications = []
        
        for employee in employees:
            # Crear 2-8 notificaciones por empleado
            num_notifications = random.randint(2, 8)
            
            for _ in range(num_notifications):
                notification_type = random.choice(notification_types)
                priority = random.choice(priorities)
                
                # Fecha aleatoria en los √∫ltimos 30 d√≠as
                created_at = datetime.utcnow() - timedelta(days=random.randint(1, 30))
                
                notification = Notification(
                    user_id=employee.user_id,
                    title=f"Notificaci√≥n de {notification_type}",
                    message=f"Esta es una notificaci√≥n de {notification_type} para {employee.full_name}",
                    notification_type=notification_type,
                    priority=priority,
                    read=random.choice([True, True, False]),  # 66% le√≠das
                    send_email=random.choice([True, False]),  # 50% con email
                    email_sent=random.choice([True, False]),  # 50% emails enviados
                    created_at=created_at
                )
                db.session.add(notification)
                notifications.append(notification)
        
        db.session.commit()
        print(f"‚úÖ {len(notifications)} notificaciones creadas")
        return notifications
    
    def load_holidays(self):
        """Carga festivos para los pa√≠ses de los empleados"""
        print("üéâ Cargando festivos...")
        
        holiday_service = HolidayService()
        countries_to_load = set()
        
        # Obtener pa√≠ses √∫nicos de empleados
        employees = Employee.query.filter(Employee.active == True).all()
        for employee in employees:
            countries_to_load.add(employee.country)
        
        total_holidays = 0
        for country in countries_to_load:
            try:
                holidays = holiday_service.load_holidays_for_country(country, datetime.now().year)
                total_holidays += len(holidays)
                print(f"   ‚úì {len(holidays)} festivos cargados para {country}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error cargando festivos para {country}: {e}")
        
        print(f"‚úÖ Total: {total_holidays} festivos cargados")
    
    def generate_all_data(self, preserve_admins=True):
        """Genera todos los datos realistas"""
        print("üöÄ Iniciando generaci√≥n de datos realistas...")
        print("=" * 50)
        
        try:
            # Limpiar datos existentes
            self.clean_existing_data(preserve_admins)
            
            # Crear equipos
            teams = self.create_teams()
            
            # Crear managers
            managers = self.create_managers(teams)
            
            # Crear empleados
            employees = self.create_employees(teams)
            
            # Crear actividades de calendario
            activities = self.create_calendar_activities(employees)
            
            # Crear notificaciones
            notifications = self.create_notifications(employees)
            
            # Cargar festivos
            self.load_holidays()
            
            print("=" * 50)
            print("‚úÖ Generaci√≥n de datos completada exitosamente!")
            print(f"üìä Resumen:")
            print(f"   ‚Ä¢ {len(teams)} equipos")
            print(f"   ‚Ä¢ {len(managers)} managers")
            print(f"   ‚Ä¢ {len(employees)} empleados")
            print(f"   ‚Ä¢ {len(activities)} actividades de calendario")
            print(f"   ‚Ä¢ {len(notifications)} notificaciones")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error generando datos: {e}")
            db.session.rollback()
            return False

def main():
    """Funci√≥n principal para ejecutar el script"""
    from flask import Flask
    from config import config
    
    # Crear aplicaci√≥n Flask
    app = Flask(__name__)
    config_name = os.environ.get('FLASK_ENV', 'development')
    app.config.from_object(config[config_name])
    
    # Inicializar base de datos
    db.init_app(app)
    
    with app.app_context():
        generator = RealisticDataGenerator()
        
        # Preservar admins por defecto en modo no interactivo
        preserve_admins = True
        
        # Generar datos
        success = generator.generate_all_data(preserve_admins)
        
        if success:
            print("\nüéâ ¬°Datos realistas generados exitosamente!")
            print("üí° Puedes usar las credenciales:")
            print("   ‚Ä¢ Email: ana.garcia@company.com")
            print("   ‚Ä¢ Password: password123")
            print("   ‚Ä¢ Rol: Manager")
        else:
            print("\n‚ùå Error generando datos realistas")
            sys.exit(1)

if __name__ == '__main__':
    main()
